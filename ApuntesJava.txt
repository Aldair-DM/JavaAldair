Escritura de Camel o Camello se refiere a que debemos de escribir siempre los nombres de
nuestras clases, donde siempre irán pegadas y la primera letra de cada palabra deberá de ir
en Mayúsculas.

Clase 1 Java para anotar la documentación del código lo que se debe de hacer es abrir con
2 paréntesis los cuales nos darán la opción de hacer comentarios respecto a lo que estemos
haciendo dentro del código o también podemos usar el diagonal más 2 asteriscos los cuales
sirven para algo similar, pero generalmente para partes de temas dentro del ID separando asi
los temas o secciones del código 

*** //bla ó /**bla ***

Java si diferencia entre Mayúsculas y minúsculas.

1.0 CLASE HOLA MUNDO

Siempre que iniciamos con java lo que se va a generar dentro de la clase es el public class
adjunto al nombre de nuestra clase y sus llaves de apertura y cierre.

Para esta clase lo que haremos es utilizar la primera apertura que vayamos a ver en java
para poder trabajar con nuestro proyecto el cual es;

*** public static void main (String args[]){ ***

Donde la función main nos permite trabajar con nuestra parte del proyecto 

TODO DEBE ESCRIBIRSE RESPETANDO MAYÚSCULAS Y MINÚSCULAS.

Después veremos el significado de todas las palabras que componen tal enunciado

*** ESCRITURA ***

Para poder escribir en Java debemos de llamar una función que nos active la función de
escritura la cual nos permitirá escribir como imprimir funciones de tipo texto o string

*** System.out.println(); ***

La cual a manera de atajo se puede escribir como "SOUT" dentro del entorno y con la tecla tabulador
podemos ahorrarnos escribir del todo la expresión o en otros ID de programación es más fácil,
ya que no es necesaria la tecla tab para conseguir el comando deseado.

Dentro de los paréntesis del println vamos a escribir "entrecomilladas las cosas que queramos
imprimir en el compilador"

*** System.out.println("Hola mundo desde Java"); ***

Tarea 1: Saludar desde java

*** System.out.println("Hola, que tal"); *** (Probemos)
Tarea finalizada con éxito.


SECCIÓN 2 .8 VARIABLES EN JAVA

Una variable puede almacenar distintos tipos de datos asi como variar en sus valores
es decir que puede tener un valor diferente según haga falta

TIPOS DE DATOS EN JAVA:

TIPOS PRIMITIVOS:
-Tipos enteros o numerales
-Tipos string o cadena (texto)
-Tipos flotantes (decimales o sea punto decimal)


TIPOS REFERENCIADOS:
-Clases
-Interfaces
-Arrays

VARIABLES PRIMITIVAS, TÉRMINOS Y ESTRUCTURAS:

Para definir un tipo de variable entera o de números se hace con el término "int"
y al frente el nombre de la misma que debe encontrarse en formato camel o de camello
el cual se denota poniendo la primera letra de la primera palabra en minúscula y el
inicio de la siguiente palabra en mayúsculas, posteriormente lo que haremos es añadir
un signo de igual (=) junto con el valor que le vamos a asignar a dicha variable seguida
del punto y coma ";"

EJEMPLO DE INT+NOMBRE:

int miVariableEntera = 10;

IMPRESIÓN DE VARIABLES:

Para imprimir una variable que ya hemos definido lo que debemos de hacer es de hacer
un SOUT y dentro de los paréntesis del println() vamos a poner el nombre de la variable
que queremos que sea impresa.

*** sout.println(miVariableEntera); ***
Ejecutamos y ya ha funcionado la ejecución.

Como ya se ha definido esta variable podremos usarla a lo largo del programa
asi como cambiar el valor de dicha variable, o sea que si después volvemos a
escribir la variable asignando otro valor entonces esa variable previamente
definida fue redefinida y no hace falta especificar el tipo de variable que es "int
"
Documentemos también el programa.

Sin embargo, una variable que ya fue usada dentro de un método no será posible usarla
en este caso usamos la variable "miVariableEntera" fue usada en main no puede ser usada
en otra.

TIPO DE DATO STRING:

String no es un dato primitivo sino una clase de java la cual nos permite crear
una variable de tipo texto, igualmente le asignamos un valor con un signo igual
y luego entre comillas vamos a poner aquello que queremos que sea escrito e impreso.

EJEMPLO STRING:

String miVariableCadena = "Saludos";

Tarea: ASIGNAR A ESA VARIABLE EL VALOR DE ADIOS E IMPRIMIR.

Usando el comando control+clic sobre una variable nos llevará a la línea donde
está creada.

Si alguna ventana fue cerrada podemos darle en el apartado window y sobre eso buscar la consola,
pero en IntelliJ no hace falta, ya que generalmente está abajo.

CLASE VAR

VAR= Inferencia de tipo de dato en java o sea que según el valor que le asignemos,
sea string o int o float va a ser más sencillo de usar las variables, puesto que no
tendríamos que definirlas según su tipo

ATAJO NUEVO: Cuando queramos imprimir el valor de la variable junto con el nombre de
la misma lo que haremos será usar el comando soutv+tabulador o en IntelliJ vamos
a seleccionar la opción únicamente escribiendo ese atajo y se desplegará el menu de opciones

CLASE REGLAS PARA DEFINIR UNA VARIABLE:

Una regla que necesitamos tener en cuenta es que no podemos iniciar el nombre de una
variable con un valor numérico.
// 1miVariableVar //
// # //

Tipos correctos que pueden definirse:

var miVariable = 1;
var _miVariable = 2;
var $miVariable = 3;

También es posible usar letras con acento, pero no es lo recomendable en buenas prácticas

CLASE CONCATENACIÓN DE CADENAS EN JAVA:

Una vez hayamos definido las variables que queramos concatenar usaremos el conector +
entre ambas variables dentro del paréntesis a la hora de imprimir los datos que
queramos mostrar

También podemos combinar las variables dentro de una nueva definiendo ambas como
el valor de la nueva variable e imprimirlo también.

*** var3 = var1 + var2; ***
*** sout var3; ***
*** soutv ***

Espacios:
Para crear un espacio entre 2 variables a la hora de imprimir o en sintaxis usaremos
el término" "entre ambas mediante el signo de +.

*** var3= var1 + " " + var2; ***

También podemos usar un espacio dentro de las mismas cadenas de texto, pero usaremos
el más conveniente.

Continuar en clase 12, "Ejercicio de concatenación en Java min 3:14".

CONCATENACIÓN DE VARIABLES ENTERAS EN SUMA, RESTA, MUL O DIVISIÓN DE NÚMEROS

En esta parte llo que vamos a hacer es diseñar 2 nuevas variables en las cuales
vamos a darles un valor numérico y en el momento de imprimirlos los sumaremos,
restaremos, multiplicaremos y dividiremos.

Lo recomendable es siempre usar nombres de variables largas, ya que son buenas
prácticas, pero igualmente podemos nombrar las variables con nombres cortos como
una sola letra.

***i=5;***

NOTA:
Para divisiones donde el numerador sea menor al dividiendo este va a dar 0 entonces
es considerable usar siempre un numerador más grande.

También podemos concatenar valores y luego de eso concatenar una cadena String
o sea que podemos hacer operaciones y luego unirlas a una variable de tipo String

***A+B+miVariableCadena***
= 10Aldair.

CONCATENACIÓN DE ENTEROS SIN OPERACIÓN

En java las impresiones se leen de izquierda a derecha y existe una regla llamada
contexto cadena donde si del lado izquierdo se lee primero una cadena entonces los
términos del lado derecho se interpretarán de la misma forma dando como resultado
no una suma de variables enteras sino una impresión del valor de las mismas.

soutprintln(miVariableCadena + A + B)
donde A es 5 y B es 6.

No va a darnos:
cadena 11
sino
cadena 56.

De esta forma podemos ver por la posibilidad de poder meter antes una variable vacía
de tipo string simplemente para imprimir números sin interacción operacional entre
ellos.

Ahora, si queremos imprimir primero la variable String y luego si operar con los
enteros entonces vamos a añadir un paréntesis a la operación (todo dentro del
paréntesis del println).

*** soutln(cadena + (A+B)); ***
En esta estructura lo que hacemos es imprimir primero la variable cadena y evitamos
el contexto cadena y conseguimos la suma igualmente y esto con cualquier símbolo de
operación, los paréntesis al igual que en matemáticas toman un valor primordial
entonces primero se realiza la operación y luego se imprime en el orden en el que
definimos la impresión.
O sea que los paréntesis modifican la prioridad de la ecuación.

CLASE CARACTERES ESPECIALES EN JAVA

Para hacer un salto de línea en la consola lo que haremos es un paréntesis inverso+n
de esta forma, vamos a generar un salto de línea dentro de una variable de tipo
String la cual vamos a ejemplificar:

*** Sout("Hola \n"); ***
esto escribirá hola y posteriormente una línea entera de salto

COMANDO TABULADOR.
Este comando sirve para generar un espacio de medida determinada entre el último
carácter escrito y el siguiente a imprimir
"\t"
COMANDO RETROCESO
"\b" para este comando se usará cuando hayamos dejado un espacio en blanco
dentro de una variable o impresión, dejando limpio el código de ese espacio.

TODOS SON ACUMULABLES O SEA QUE SI PONES VARIOS DE CADA UNA SU FUNCIÓN SE REPLICARÁ
EL NÚMERO DE VECES QUE LO HAYAS TECLEADO

COMILLAS DENTRO DEL STRING

Para usar comillas simples' 'o comillas dobles""dentro de java se usará el término

\' Y \" Obviamente deben de pertenecer dentro de una cadena de texto

*** "Como usar dobles comillas: \'" + miVariableCadena + "\"";
Ahí estamos usando ambas aplicaciones.
Como las comillas simples no rompen el sistema de cadenas podemos usarla directamente
dentro de dos comillas:"'"

De hecho IntelliJ si es capaz de leer el paréntesis inverso con comillas simples,
pero recomienda ponerlo entre comillas dobles.

***"'"***

CLASE Scanner.

En la clase Scanner lo que hacemos es que el usuario o usuarios puedan meter el
valor que quieran dentro de diversas variables y a su vez que se guarde esta
información.
Se hace uso de la siguiente línea declarativa respetando mayúsculas y minúsculas

Primero anotaremos "Scanner" + el nombre de la variable de la cual leeremos la
información y un signo igual el cual le dará valor a todo aquello que estemos
creando, dentro usaremos la palabra reservada "new" + Scanner + (System.in)

Básicamente con eso estamos diciendo que queremos leer la información de
la variable.

***¨Scanner miVariableScanner = new Scanner(System.in) ***

(Donde in significa input y System es una clase de Java que nos da acceso a "in")

Scanner cumple su función fuera del main principal en otro paquete llamado util,
pero para que funcione debemos importarla hacía allá posicionándonos sobre la
clase Scanner y en add import java.util clase Scanner se importará de forma
automática.
La variable que definimos puede leerse varias veces aunque ya se haya escrito
algo en ella.

Para hacer esto, dentro de la variable usaremos una instrucción nueva.

1) Primero declaremos nuestra variable Usuario haciendo uso de la variable que
nos permite escanear

*** var usuario = miVariableScanner ***

2) A esta variable compuesta le pondremos una instrucción nueva que nos permitirá
que se lea una línea completa y que no pase nada hasta que el usuario escriba
y se hace con el siguiente comando:

***.nextLine() *** //Después de haber puesto toda la estructura anterior.

*** var usuario = miVariableScanner.nextLine(); ***

Esto nos dará la posibilidad de leer una variable multiples veces de manera
dinámica, pero para poder saber que queremos leer primero debemos de mandar a
imprimir una instrucción de tipo int o String dependiendo que es lo que vayamos
a necesitar.

CÓDIGO COMPLETO CLASE SCANNER:

soutln= System.out.println();

***

soutln("Escribe tu nombre de usuario");
Scanner miVariableScanner = new Scanner(System.in);
var miUsuario = miVariableScanner.nextLine();

***

De igual forma podemos complementar el programa añadiendo más variables
que sean capaces de leerse para así obtener más datos que necesitemos como lo
son la edad, altura, nombre etc.

PUNTO IMPORTANTE
LA VARIABLE QUE YA CONTENGA EL "NEXTLINE" FUNCIONA CON TODO LO QUE PIDAMOS Y NO
ES NECESARIO VOLVER A DEFINIR UNA SEGUNDA VARIABLE DE SCANNER

(Aclarar en la documentación del código)

//Cometí un error por adelantarme y es que la primera variable de Scanner
//es conveniente ponerle un nombre universal como Consola o Lector, ya que
//podemos reutilizarla únicamente asignando otro nombre después de ya haber
//leído algún dato previo.

       -fin de la "claseScanner."
       FIN DE LA SECCIÓN 2.

CLASE DE REPASO INFERENCIA TIPOS DE VARIABLES EN JAVA, FORMAS DE DECLARAR, SCANNER ETC

Inferencia en java

Literales numéricas en java se les conoces como int declaración de camello
int miVarInt
Mientras que el String se refiere a tipo de texto
String miVarString
Var a su vez infiere que tipo de variable se trata, independientemente de
si es una variable entera, cadena, flotante etc...
var miVar
Concatenamos usando sout metiendo signos de + para concatenar y luego utilizaremos
la propiedad de la cadena al inicio de la impresión para que asi no se sumen los números,
sino que se impriman uno detrás del otro

Recordemos el uso de soutv para imprimir el último valor de la variable junto
con su nombre

Recordemos que podemos cambiar el valor que ya tiene nuestra variable solo
con poner el nombre con un signo igual más el valor que le vayamos a asignar
no hace falta tampoco volver a declarar que tipo de variable es

Usando \n saltamos línea siempre y cuando lo metamos dentro de comillas

\t sirve para hacer una tabulación o espacio al imprimir

\b sirve para hacer un borrado de espacio perteneciente a una letra

Ahora hablaremos de uno interesante el "\'" el cual pone comillas según donde lo
asignemos e igualmente necesita de comillas a su alrededor para ellos (no siempre,
pero por seguridad al programar habría que hacerlo o no

Ahora para comillas dobles deberemos hacer exactamente lo mismo "\""
Probaremos todos en código
Funcionó

SCANNER
Visto lo anterior podemos darle el nombre de código duro o estático
que pueda cambiar dependiendo el tiempo o persona, scanner se encarga de ello

Para declarar debemos de meter primero el término Scanner + nombre de variable
e igualarlo a:

new Scanner(System.in);

Con esto ya tenemos un scanner para escritura dinámica de variables
y primero pondremos la instrucción necesaria para luego definir una variable
normal, pero igualarla a variable.nextLine();
Scanner consola = new Scanner(System.in);
System.out.println("Escribe tu nombre:");
        var usuario = consola.nextLine();
        //Debemos escribir info y solo ahí se detendrá el programa
        System.out.println("Bienvenido" + " " + usuario);







        FIN SECCIÓN 1 Y 2.








